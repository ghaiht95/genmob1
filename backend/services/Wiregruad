import os
import subprocess
import asyncio
from config import settings

class SoftEtherVPN:
    def __init__(self, server_ip=None, server_port=None, admin_password=None):
        self.server_ip = server_ip or settings.SOFTETHER_SERVER_IP
        self.server_port = server_port or settings.SOFTETHER_SERVER_PORT
        self.admin_password = admin_password or settings.SOFTETHER_ADMIN_PASSWORD
        
        # تحديد المسار الكامل لـ vpncmd
        self.vpncmd_path = settings.VPNCMD_PATH

    async def create_hub(self, hub_name, hub_password="12345678"):
        """إنشاء هاب جديد في سيرفر SoftEther مع كلمة مرور تلقائية وإعدادات DHCP"""
        # إنشاء الهاب
        cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            "/ADMINHUB:DEFAULT",
            "/CMD", "HubCreate", hub_name
        ]
        # كلمة مرور hub مرتين (الإدخال + التأكيد)
        input_data = f"{hub_password}\n{hub_password}\n"
        
        # استخدام asyncio لتنفيذ العملية
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await proc.communicate(input=input_data.encode())
        
        if proc.returncode == 0:
            # تفعيل DHCP
            dhcp_enable_cmd = [
                self.vpncmd_path,
                "/SERVER", f"{self.server_ip}:{self.server_port}",
                f"/PASSWORD:{self.admin_password}",
                f"/ADMINHUB:{hub_name}",
                "/CMD", "DhcpEnable"
            ]
            
            dhcp_enable_proc = await asyncio.create_subprocess_exec(
                *dhcp_enable_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            await dhcp_enable_proc.communicate()
            
            if dhcp_enable_proc.returncode == 0:
                # تعيين إعدادات DHCP
                dhcp_set_cmd = [
                    self.vpncmd_path,
                    "/SERVER", f"{self.server_ip}:{self.server_port}",
                    f"/PASSWORD:{self.admin_password}",
                    f"/ADMINHUB:{hub_name}",
                    "/CMD", "DhcpSet",
                    "/START:10.0.0.100",
                    "/END:10.0.0.200",
                    "/MASK:255.255.255.0",
                    "/EXPIRE:86400",
                    "/GW:none",
                    "/DNS:none",
                    "/DNS2:none",
                    "/DOMAIN:none",
                    "/LOG:yes"
                ]
                
                dhcp_set_proc = await asyncio.create_subprocess_exec(
                    *dhcp_set_cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                
                await dhcp_set_proc.communicate()
                
                if dhcp_set_proc.returncode == 0:
                    # تفعيل SecureNAT
                    securenat_cmd = [
                        self.vpncmd_path,
                        "/SERVER", f"{self.server_ip}:{self.server_port}",
                        f"/PASSWORD:{self.admin_password}",
                        f"/ADMINHUB:{hub_name}",
                        "/CMD", "SecureNatEnable"
                    ]
                    
                    securenat_proc = await asyncio.create_subprocess_exec(
                        *securenat_cmd,
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE
                    )
                    
                    await securenat_proc.communicate()
                    return securenat_proc.returncode == 0
        
        return False

    async def delete_hub(self, hub_name):
        """حذف هاب من سيرفر SoftEther مع تتبع الإخراج"""
        cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            "/ADMINHUB:DEFAULT",
            "/CMD", "HubDelete", hub_name
        ]

        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await proc.communicate()
        stdout_decoded = stdout.decode()
        stderr_decoded = stderr.decode()

        # Log the result
        import logging
        logging.warning(f"[VPN] HubDelete '{hub_name}' stdout:\n{stdout_decoded}")
        logging.warning(f"[VPN] HubDelete '{hub_name}' stderr:\n{stderr_decoded}")
        logging.warning(f"[VPN] HubDelete return code: {proc.returncode}")

        return proc.returncode == 0

    async def create_user(self, hub_name, username, password):
        """إنشاء مستخدم جديد في هاب معين"""
        # إنشاء المستخدم
        create_cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            f"/ADMINHUB:{hub_name}",
            "/CMD", "UserCreate", username, "/GROUP:none", "/REALNAME:none", "/NOTE:none"
        ]
        
        create_proc = await asyncio.create_subprocess_exec(
            *create_cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        await create_proc.communicate()
        
        if create_proc.returncode == 0:
            # تعيين كلمة المرور للمستخدم
            pwd_cmd = [
                self.vpncmd_path,
                "/SERVER", f"{self.server_ip}:{self.server_port}",
                f"/PASSWORD:{self.admin_password}",
                f"/ADMINHUB:{hub_name}",
                "/CMD", "UserPasswordSet", username, f"/PASSWORD:{password}"
            ]
            
            pwd_proc = await asyncio.create_subprocess_exec(
                *pwd_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            await pwd_proc.communicate()
            return pwd_proc.returncode == 0
        
        return False

    async def delete_user(self, hub_name, username):
        """حذف مستخدم من هاب معين"""
        cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            f"/ADMINHUB:{hub_name}",
            "/CMD", "UserDelete", username
        ]
        
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        await proc.communicate()
        return proc.returncode == 0

    async def get_hub_status(self, hub_name):
        """الحصول على حالة الهاب"""
        cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            f"/ADMINHUB:{hub_name}",
            "/CMD", "HubStatusGet"
        ]
        
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await proc.communicate()
        return stdout.decode()

    async def get_user_list(self, hub_name):
        """الحصول على قائمة المستخدمين في هاب معين"""
        cmd = [
            self.vpncmd_path,
            "/SERVER", f"{self.server_ip}:{self.server_port}",
            f"/PASSWORD:{self.admin_password}",
            f"/ADMINHUB:{hub_name}",
            "/CMD", "UserList"
        ]
        
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await proc.communicate()
        return stdout.decode()
        
    def adapter_exists(self, adapter_name):
        """التحقق من وجود محول الشبكة (مستخدم في الكود الأصلي)"""
        # هذه الدالة تم الاحتفاظ بها كما هي لأنها مُستخدمة في الكود الأصلي
        # ولا يبدو أنها تحتاج إلى تنفيذ غير متزامن
        return True
